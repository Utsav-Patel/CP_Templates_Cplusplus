<snippet>
	<content><![CDATA[
template <typename T>
class ST{
    public:
        const int MAXN = 10010;
        vector<T> arr;
        vector<T> lazy;
        T constant;
 
        ST(){
            arr.resize(MAXN<<2);
            lazy.resize(MAXN<<2);
            constant = 0;
            buildSegmentTree(0,MAXN-1,0);
        }
 
        T mergeSegmentTree(T a,T b){
            return max(a, b);
        }
 
        void buildSegmentTree(int s,int e,int idx){
            if(s==e)
                arr[idx] = constant;
            else{
                int mid = (s+e)>>1;
                buildSegmentTree(s,mid,(idx<<1)+1);
                buildSegmentTree(mid+1,e,(idx<<1)+2);
                arr[idx] = mergeSegmentTree(arr[(idx<<1)+1],arr[(idx<<1)+2]);
            }
        }
 
        T lazyMerge(T a,T b){
            return b;
        }
 
        void check(int ind,int l,int r){
            if(lazy[ind]!=constant){
                arr[ind] = lazy[ind];
                if(l!=r){
                    lazy[(ind<<1)+1] = lazyMerge(lazy[(ind<<1)+1],lazy[ind]);
                    lazy[(ind+1)<<1] = lazyMerge(lazy[(ind+1)<<1],lazy[ind]);
                }
                lazy[ind] = constant;
            }
        }
 
        void updateSegmentTree(int s,int e,int idx,int x,int y,T z){
            check(idx,s,e);
            if(x>y||s>e||y<s||x>e)
                return;
            else if(x<=s&&y>=e){
                arr[idx] = z;
                if(s!=e){
                    lazy[(idx<<1)+1] = lazyMerge(lazy[(idx<<1)+1],z);
                    lazy[(idx<<1)+2] = lazyMerge(lazy[(idx<<1)+2],z);
                }
                return ;
            }
            int mid = (s+e)>>1;
            updateSegmentTree(s,mid,(idx<<1)+1,x,y,z);
            updateSegmentTree(mid+1,e,(idx+1)<<1,x,y,z);
            arr[idx] = mergeSegmentTree(arr[(idx<<1)+1],arr[(idx<<1)+2]);
        }
 
        void modify(int start,int end,T value){
            updateSegmentTree(0, MAXN-1, 0, start, end, value);
        }
 
        T querySegmentTree(int s,int e,int idx,int x,int y){
            check(idx,s,e);
            if(x>y||s>e||y<s||x>e)
                return constant;
            else if(x<=s&&y>=e)
                return arr[idx];
            int mid = (s+e)>>1;
            return mergeSegmentTree(querySegmentTree(s,mid,(idx<<1)+1,x,y),querySegmentTree(mid+1,e,(idx<<1)+2,x,y));
        }
 
        T get(int start, int end){
            return querySegmentTree(0, MAXN-1, 0, start, end);
        }
};
 
template<typename T>
struct HLD{
    private:
        const static int MAXN = 10010;
        const static int LOGN = 22;
        int chainNo, chainHead[MAXN], chainPosition[MAXN], chainIndex[MAXN], chainSize[MAXN];
        int lca[MAXN][LOGN];
        int positionInSegmentTree[MAXN];
        int counter;
        int subTreeSize[MAXN];
        int depth[MAXN];
        vector<int> v[MAXN];
        int numberOfNodes;
        bool canQueryOverride;
        ST<T> seg;
 
    public:
        void hld(int cur, int par){
            if(chainHead[chainNo]==-1)
                chainHead[chainNo] = cur;
            chainIndex[cur] = chainNo;
            chainPosition[cur] = chainSize[chainNo];
            chainSize[chainNo]++;
            positionInSegmentTree[cur] = counter++;
 
            int ind = -1,mxSize = -1;
            for(int i:v[cur]){
                if(i==par)
                    continue;
                if(subTreeSize[i]>mxSize){
                    mxSize = subTreeSize[i];
                    ind = i;
                }
            }
 
            if(ind>=0)
                hld(ind, cur);
            for(int i:v[cur]){
                if(i==ind || i==par)
                    continue;
                chainNo++;
                hld(i, cur);
            }
        }
        
        void findSubTreeSize(int cur,int par){
            lca[cur][0] = par;
            subTreeSize[cur]++;
 
            for(int i:v[cur]){
                if(i==par)
                    continue;
                depth[i] = depth[cur]+1;
                findSubTreeSize(i, cur);
                subTreeSize[cur]+=subTreeSize[i];
            }
        }
 
        void init(int n, vector<int> G[], int startIndex, bool overRide){
            
            for(int i=startIndex;i<=n;i++)
                for(int j:G[i])
                    v[i].push_back(j);
 
            n++;
            numberOfNodes = n;
            chainNo = 0;
            counter = 0;
            canQueryOverride = overRide;
            fill(subTreeSize, subTreeSize+n, 0);
            fill(chainHead, chainHead+n, -1);
            fill(chainSize, chainSize+n, 0);
            lca[0][0] = 0;
            
            findSubTreeSize(startIndex, -1);
 
            for(int i=1;i<LOGN;i++){
                for(int j=startIndex;j<=numberOfNodes;j++)
                    lca[j][i] = lca[lca[j][i-1]][i-1];
            }
 
            hld(startIndex, -1);
        }
 
        int LCAquery(int u,int v){
            if(depth[u]<depth[v])
                swap(u,v);
            int diff=depth[u]-depth[v];
            for(int i=0;i<LOGN;i++){
                if( (diff>>i)&1 ){
                    u=lca[u][i];
                }
            }
            if(u==v)
                return u;
            for(int j=LOGN-1;j>=0;j--){
                if(lca[u][j]!=lca[v][j]){
                    u=lca[u][j];
                    v=lca[v][j];
                }
            }
            return lca[u][0];
        }
 
        T merge(T a, T b){
            return max(a, b);
        }
 
        T inverseOfMerge(T a, T b){
            return a-b;
        }
 
        T query_up(int cur, int par){
            int uChain = chainIndex[cur], vChain = chainIndex[par];
            T ans = seg.constant;
            while(1){
                if(uChain == vChain){
                    ans = merge(ans, seg.get(positionInSegmentTree[par]+1, positionInSegmentTree[cur]));
                    break;
                }
                ans = merge(ans, seg.get(positionInSegmentTree[chainHead[uChain]], positionInSegmentTree[cur]));
                cur = lca[chainHead[uChain]][0];
                uChain = chainIndex[cur];
            }
            return ans;
        }
 
        T query(int u, int v){
            if(u == v)
                return seg.constant;
            T lc = LCAquery(u, v);
            T ans1 = query_up(u, lc);
            T ans2 = query_up(v, lc);
            T ans = merge(ans1, ans2);
            if(canQueryOverride)
                ans -= query_up(lc, lc);
            return ans;
        }
 
        void update(int u, int v, T val){
            T lc = LCAquery(u, v);
            update_up(u, lc, val);
            update_up(v, lc, val);
            if(canQueryOverride)
                update_up(lc, lc, -val);
        }
 
        void update_up(int cur,int par,T val){
            int uChain = chainIndex[cur], vChain = chainIndex[par];
            while(1){
                if(uChain == vChain){
                    seg.modify(positionInSegmentTree[par]+1, positionInSegmentTree[cur], val);
                    break;
                }
                seg.modify(positionInSegmentTree[chainHead[uChain]], positionInSegmentTree[cur], val);
                cur = lca[chainHead[uChain]][0];
                uChain = chainIndex[cur];
            }
        }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>HLDonEdges</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
