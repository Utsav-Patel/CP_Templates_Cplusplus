<snippet>
	<content><![CDATA[
namespace Helper{
    int p1 = 6666;
    int p2 = 5555;
    vector<int> pow1,pow2;
    vector<int> invpow1,invpow2;

    void init_hashing(int n){
        pow1.resize(n+1);pow2.resize(n+1);
        invpow1.resize(n+1);invpow2.resize(n+1);
        pow1[0] = pow2[0] = 1;
        for(int i=1;i<=n;i++){
            pow1[i] = mul(pow1[i-1],p1,mod1);
            pow2[i] = mul(pow2[i-1],p2,mod2);
        }
        for(int i=0;i<=n;i++){
            invpow1[i] = powermod(pow1[i],mod1-2,mod1);
            invpow2[i] = powermod(pow2[i],mod2-2,mod2);
        }
    }
}


struct Hashing {
    vector<int> hash1, hash2;
    int n;
    Hashing(string s) {
        n = s.size() - 1;
        Helper::init_hashing(n+1);
        hash1.resize(n+1);hash2.resize(n+1);
        hash1[0] = s[0];
        hash2[0] = s[0];
        for(int i=1;i<=n;i++){
            hash1[i] = add(hash1[i-1],mul(s[i],Helper::pow1[i],mod1),mod1);
            hash2[i] = add(hash2[i-1],mul(s[i],Helper::pow2[i],mod2),mod2);
        }
    }
    pair<int,int> getHash(int i, int j){
        pair<int,int> ret;
        if(i==0)
        	return {hash1[j],hash2[j]};
        ret = {mul(sub(hash1[j],hash1[i-1],mod1),Helper::invpow1[i],mod1),mul(sub(hash2[j],hash2[i-1],mod2),Helper::invpow2[i],mod2)};
        return ret;
    }
};
$1
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Hashing</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
