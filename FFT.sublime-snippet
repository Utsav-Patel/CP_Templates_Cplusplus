<snippet>
	<content><![CDATA[
namespace FFT{
    void fft(vector<complex<double> >&a,bool invert){
        int n=(int) a.size();
        for (int i=1,j=0;i<n;++i){
            int bit=n>>1;
            for(;j>=bit;bit>>=1) j-=bit;
            j+=bit;
            if(i<j) swap(a[i], a[j]);
        }
        for (int len=2;len<=n;len<<=1) {
            double ang=2*PI/len*(invert?-1:1);
            complex<double> wlen(cos(ang),sin(ang));
            for (int i=0;i<n;i+=len){
                complex<double> w(1);
                for(int j=0;j<len/2;++j){
                    complex<double> u=a[i+j],v=a[i+j+len/2]*w;
                    a[i+j]=u+v;
                    a[i+j+len/2]=u-v;
                    w*=wlen;
                }
            }
        }
        if(invert) for(int i=0;i<n;++i) a[i]/=n;
    }

    void multiply(const vector<lli> &a,const vector<lli> &b,vector<lli> &res){
        vector<complex<double> > fa,fb;
        for(int i=0;i<a.size();i++) fa.push_back(a[i]);
        for(int i=0;i<b.size();i++) fb.push_back(b[i]);
        size_t n=1;
        while (n<max(a.size(), b.size()))n <<= 1;n<<=1;
        fa.resize(n),fb.resize(n);
        fft(fa,false),fft(fb,false);
        for(int i=0;i<n;++i) fa[i]*=fb[i];
        fft (fa, true);
        res.resize(n);
        for(int i=0;i<n;++i) res[i]=(lli)(fa[i].real() + 0.5);
    }
}
using namespace FFT;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fft</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
